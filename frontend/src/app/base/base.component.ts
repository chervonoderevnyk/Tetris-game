import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { GameBoardComponent } from "../game-board/game-board.component";
import { HeaderComponent } from "../header/header.component";
import { FooterComponent } from "../footer/footer.component";
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-base',
  standalone: true,
  imports: [CommonModule, GameBoardComponent, HeaderComponent, FooterComponent],
  templateUrl: './base.component.html',
  styleUrls: ['./base.component.scss']
})


export class BaseComponent implements OnInit {
  score: number = 0;
  level: number = 1;
  // userAvatar = '';
  // userName = '';
  userAvatar: string = 'üôÇ';
  userName: string = '–ì—Ä–∞–≤–µ—Ü—å';

  constructor(
    private cdr: ChangeDetectorRef, 
    private authService: AuthService, 
    private router: Router
  ) {}

  ngOnInit(): void {
    try {
      const token = this.authService.getToken();
      if (!token) {
        this.router.navigate(['/']); // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É, —è–∫—â–æ —Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
      } else {
        this.authService.getUserDetails().subscribe({
          next: (user) => {
            this.userAvatar = user?.avatar || 'ü§ñ'; // –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤–∞—Ç–∞—Ä–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            this.userName = user?.username || '–ì—Ä–∞–≤–µ—Ü—å'; // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            this.cdr.detectChanges(); // –û–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
          },
          error: (err) => {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
            this.router.navigate(['/']);
          }
        });
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      this.router.navigate(['/']);
    }
  }
  
  onScoreChange(score: number): void {
    this.score = score;
    this.cdr.detectChanges();
  }
  
  onLevelChange(level: number): void {
    this.level = level;
    this.cdr.detectChanges();
  }
  
}


