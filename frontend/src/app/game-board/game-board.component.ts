import { Component, OnInit, HostListener } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Tetromino, TETROMINOES } from './tetris/tetromino';

@Component({
  selector: 'app-game-board',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './game-board.component.html',
  styleUrls: ['./game-board.component.scss']
})
export class GameBoardComponent implements OnInit {
  rows = 20;
  cols = 10;
  grid: string[][] = [];
  currentTetromino!: Tetromino;
  nextTetromino!: Tetromino; // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ñ—ñ–≥—É—Ä–∏
  position: [number, number] = [0, 4];
  intervalId: any;
  score: number = 0; // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –±–∞–ª—ñ–≤
  level: number = 1; // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —Ä—ñ–≤–Ω—è
  baseSpeed: number = 900; // –ë–∞–∑–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (–º—Å)
  isGameRunning: boolean = false; // –°—Ç–∞–Ω –≥—Ä–∏
  isPaused: boolean = false; // –°—Ç–∞–Ω –ø–∞—É–∑–∏

  ngOnInit(): void {
    this.resetGrid();
    this.nextTetromino = this.getRandomTetromino(); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —Ñ—ñ–≥—É—Ä—É
  }


  startGame(): void {
    if (this.isGameRunning) return; // –Ø–∫—â–æ –≥—Ä–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
  
    this.isGameRunning = true;
    this.isPaused = false; // –ó–Ω—ñ–º–∞—î–º–æ –ø–∞—É–∑—É
    this.score = 0; // –°–∫–∏–¥–∞—î–º–æ –±–∞–ª–∏
    this.level = 1; // –°–∫–∏–¥–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å
    this.resetGrid(); // –°–∫–∏–¥–∞—î–º–æ —Å—ñ—Ç–∫—É
    this.spawnTetromino(); // –°–ø–∞–≤–Ω–∏–º–æ –Ω–æ–≤—É —Ñ—ñ–≥—É—Ä—É
    this.startGameLoop(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª
  }

  togglePause(): void {
    if (!this.isGameRunning) return; // –Ø–∫—â–æ –≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

    this.isPaused = !this.isPaused;

    if (this.isPaused) {
      clearInterval(this.intervalId); // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
    } else {
      this.updateGameSpeed(); // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä
    }
  }

  resetGrid(): void {
    this.grid = Array.from({ length: this.rows }, () =>
      Array(this.cols).fill('')
    );
  }

 getRandomTetromino(): Tetromino {
    const index = Math.floor(Math.random() * TETROMINOES.length);
    return TETROMINOES[index];
  }

  spawnTetromino(): void {
    this.currentTetromino = this.nextTetromino; // –ü–æ—Ç–æ—á–Ω–∞ —Ñ—ñ–≥—É—Ä–∞ —Å—Ç–∞—î –Ω–∞—Å—Ç—É–ø–Ω–æ—é
    this.position = [0, 4]; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è —Ñ—ñ–≥—É—Ä–∏
    this.nextTetromino = this.getRandomTetromino(); // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—É –Ω–∞—Å—Ç—É–ø–Ω—É —Ñ—ñ–≥—É—Ä—É

    const canPlace = this.currentTetromino.shape.every(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;

      if (y < 0) return true;
      return (
        y >= 0 &&
        y < this.rows &&
        x >= 0 &&
        x < this.cols &&
        this.grid[y][x] === ''
      );
    });

    if (!canPlace) {
      clearInterval(this.intervalId);
      this.isGameRunning = false;
      alert('üíÄ Game Over!');
      return;
    }

    this.drawTetromino();
  }

  getNextTetrominoCell(row: number, col: number): string {
    if (!this.nextTetromino) return '';
    return this.nextTetromino.shape.some(([dy, dx]) => dy + 1 === row && dx + 1 === col)
      ? this.nextTetromino.color // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–ª—ñ—Ä —Ñ—ñ–≥—É—Ä–∏
      : '';
  }

  drawTetromino(): void {
    this.currentTetromino.shape.forEach(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
      if (y >= 0 && y < this.rows && x >= 0 && x < this.cols) {
        this.grid[y][x] = this.currentTetromino.color;
      }
    });
  }

  clearTetromino(): void {
    this.currentTetromino.shape.forEach(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
      if (y >= 0 && y < this.rows && x >= 0 && x < this.cols) {
        this.grid[y][x] = '';
      }
    });
  }

  canMoveTo(offsetY: number, offsetX: number): boolean {
    return this.currentTetromino.shape.every(([dy, dx]) => {
      const y = this.position[0] + dy + offsetY;
      const x = this.position[1] + dx + offsetX;
  
      // –¥–æ–∑–≤–æ–ª—è—î–º–æ, —è–∫—â–æ —á–∞—Å—Ç–∏–Ω–∞ —Ñ—ñ–≥—É—Ä–∏ –≤–∏–ª–∞–∑–∏—Ç—å –Ω–∞–¥ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É
      if (y < 0) return true;
  
      return (
        y >= 0 &&
        y < this.rows &&
        x >= 0 &&
        x < this.cols &&
        this.grid[y][x] === '' // –≤–∞–∂–ª–∏–≤–æ! –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
      );
    });
  }

  moveDown(): void {
    this.clearTetromino(); // –≤–∞–∂–ª–∏–≤–æ!
  
    if (this.canMoveTo(1, 0)) {
      this.position[0]++;
      this.drawTetromino();
    } else {
      this.drawTetromino(); // –≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –º—ñ—Å—Ü–µ
      this.fixTetromino();
      this.spawnTetromino();
    }
  }
  
  startGameLoop(): void {
    this.updateGameSpeed(); // –û–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≥—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è
  }

  updateGameSpeed(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId); // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    }

    if (!this.isPaused) {
      const speed = Math.max(this.baseSpeed - (this.level - 1) * 100, 100); // –ó–º–µ–Ω—à—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å —ñ–∑ –∫–æ–∂–Ω–∏–º —Ä—ñ–≤–Ω–µ–º
      this.intervalId = setInterval(() => {
        this.moveDown();
      }, speed);
    }
  }

  updateScore(rowsCleared: number): void {
    let points = 0;
  
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ—á–∏—â–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
    switch (rowsCleared) {
      case 1:
        points = 10; // 1 —Ä—è–¥–æ–∫ = 10 –±–∞–ª—ñ–≤
        break;
      case 2:
        points = 30; // 2 —Ä—è–¥–∫–∏ = 30 –±–∞–ª—ñ–≤
        break;
      case 3:
        points = 40; // 3 —Ä—è–¥–∫–∏ = 40 –±–∞–ª—ñ–≤
        break;
      case 4:
        points = 60; // 4 —Ä—è–¥–∫–∏ = 60 –±–∞–ª—ñ–≤
        break;
      default:
        points = 0; // –Ø–∫—â–æ —Ä—è–¥–∫—ñ–≤ –Ω–µ –æ—á–∏—â–µ–Ω–æ, –±–∞–ª—ñ–≤ –Ω–µ–º–∞—î
    }
  
    this.score += points; // –î–æ–¥–∞—î–º–æ –±–∞–ª–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
  
    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å –∫–æ–∂–Ω—ñ 20 –±–∞–ª—ñ–≤
    const newLevel = Math.floor(this.score / 20) + 1;
    if (newLevel > this.level) {
      this.level = newLevel;
      this.updateGameSpeed(); // –û–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≥—Ä–∏
    }
  }

  @HostListener('window:keydown', ['$event'])
handleKey(event: KeyboardEvent): void {
  let offsetY = 0;
  let offsetX = 0;

  if (event.key === 'ArrowLeft') {
    offsetX = -1;
  } else if (event.key === 'ArrowRight') {
    offsetX = 1;
  } else if (event.key === 'ArrowDown') {
    offsetY = 1;
  } else if (event.key === ' ') {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —ñ –Ω–µ –Ω–∞ –ø–∞—É–∑—ñ, –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–µ—Ä—Ç–∞–Ω–Ω—è–º —Ñ—ñ–≥—É—Ä–∏
    if (this.isGameRunning && !this.isPaused) {
      this.rotateTetromino();
    }
    event.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –±—É–¥—å-—è–∫–∏–º —ñ–Ω—à–∏–º –¥—ñ—è–º –¥–ª—è –∫–ª–∞–≤—ñ—à—ñ space
    return;
  } else {
    return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ —ñ–Ω—à—ñ –∫–ª–∞–≤—ñ—à—ñ
  }

  // –Ø–∫—â–æ –≥—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ, —ñ–≥–Ω–æ—Ä—É—î–º–æ —ñ–Ω—à—ñ –¥—ñ—ó
  if (this.isPaused) {
    return;
  }

  this.clearTetromino();

  if (this.canMoveTo(offsetY, offsetX)) {
    this.position = [this.position[0] + offsetY, this.position[1] + offsetX];
  }

  this.drawTetromino();
}
  
  rotateTetromino(): void {
    if (!this.currentTetromino.isRotatable) {
      return; // –Ø–∫—â–æ —Ñ—ñ–≥—É—Ä–∞ –Ω–µ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
    }
  
    this.clearTetromino(); // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ñ—ñ–≥—É—Ä—É –∑ —Å—ñ—Ç–∫–∏
  
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—É —Ñ–æ—Ä–º—É –¥–ª—è –≤—ñ–¥–∫–∞—Ç—É, —è–∫—â–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ
    const oldShape = [...this.currentTetromino.shape];
  
    // –û–±—á–∏—Å–ª—é—î–º–æ –Ω–æ–≤—É —Ñ–æ—Ä–º—É (–æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∑–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–≤–æ—é —Å—Ç—Ä—ñ–ª–∫–æ—é)
    const newShape: [number, number][] = this.currentTetromino.shape.map(([dy, dx]) => [-dx, dy]);
  
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
    const canRotate = newShape.every(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
  
      return (
        y >= 0 &&
        y < this.rows &&
        x >= 0 &&
        x < this.cols &&
        this.grid[y][x] === '' // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
      );
    });
  
    if (canRotate) {
      this.currentTetromino.shape = newShape; // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ–æ—Ä–º—É
    } else {
      this.currentTetromino.shape = oldShape; // –í—ñ–¥–∫–∞—Ç –¥–æ —Å—Ç–∞—Ä–æ—ó —Ñ–æ—Ä–º–∏
    }
  
    this.drawTetromino(); // –ú–∞–ª—é—î–º–æ —Ñ—ñ–≥—É—Ä—É –∑ –Ω–æ–≤–æ—é (–∞–±–æ —Å—Ç–∞—Ä–æ—é) —Ñ–æ—Ä–º–æ—é
  }
  
  fixTetromino(): void {
    this.currentTetromino.shape.forEach(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
      if (y >= 0 && y < this.rows && x >= 0 && x < this.cols) {
        this.grid[y][x] = this.currentTetromino.color;
      }
    });

    const rowsCleared = this.clearFullRows(); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –æ—á–∏—â–∞—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —Ä—è–¥–∫–∏
    this.updateScore(rowsCleared); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∏
  }

  clearFullRows(): number {
    const rowsToClear: number[] = [];

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —Ä—è–¥–∫–∏
    this.grid.forEach((row, rowIndex) => {
      if (row.every(cell => cell !== '')) {
        rowsToClear.push(rowIndex);
      }
    });

    if (rowsToClear.length > 0) {
      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —Ä—è–¥–∫–∏
      const newGrid = this.grid.filter((_, rowIndex) => !rowsToClear.includes(rowIndex));

      // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ –∑–≤–µ—Ä—Ö—É
      while (newGrid.length < this.rows) {
        newGrid.unshift(Array(this.cols).fill(''));
      }

      this.grid = newGrid; // –û–Ω–æ–≤–ª—é—î–º–æ —Å—ñ—Ç–∫—É
    }

    return rowsToClear.length; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∏—â–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
  }
  
}



