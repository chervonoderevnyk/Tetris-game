import { Component, OnInit, HostListener } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Tetromino, TETROMINOES } from './tetris/tetromino';

@Component({
  selector: 'app-game-board',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './game-board.component.html',
  styleUrls: ['./game-board.component.scss']
})
export class GameBoardComponent implements OnInit {
  rows = 20;
  cols = 10;
  grid: string[][] = [];
  currentTetromino!: Tetromino;
  position: [number, number] = [0, 4];
  intervalId: any;

  ngOnInit(): void {
    this.resetGrid();
    this.spawnTetromino();
    this.startGameLoop();
  }

  resetGrid(): void {
    this.grid = Array.from({ length: this.rows }, () =>
      Array(this.cols).fill('')
    );
  }

  spawnTetromino(): void {
    const index = Math.floor(Math.random() * TETROMINOES.length);
    const newTetromino = TETROMINOES[index];
    const newPosition: [number, number] = [0, 4];
  
    const canPlace = newTetromino.shape.every(([dy, dx]) => {
      const y = newPosition[0] + dy;
      const x = newPosition[1] + dx;
  
      if (y < 0) return true; // –¥–æ–∑–≤–æ–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∏ –Ω–∞–¥ —Å—ñ—Ç–∫–æ—é
      return (
        y >= 0 &&
        y < this.rows &&
        x >= 0 &&
        x < this.cols &&
        this.grid[y][x] === ''
      );
    });
  
    if (!canPlace) {
      clearInterval(this.intervalId); // üõë –ó—É–ø–∏–Ω—è—î–º–æ –≥—Ä—É
      alert('üíÄ Game Over!');         // üîî –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      return;
    }
  
    this.currentTetromino = newTetromino;
    this.position = newPosition;
    this.drawTetromino();
  }
  
  

  drawTetromino(): void {
    this.currentTetromino.shape.forEach(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
      if (y >= 0 && y < this.rows && x >= 0 && x < this.cols) {
        this.grid[y][x] = this.currentTetromino.color;
      }
    });
  }

  clearTetromino(): void {
    this.currentTetromino.shape.forEach(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
      if (y >= 0 && y < this.rows && x >= 0 && x < this.cols) {
        this.grid[y][x] = '';
      }
    });
  }

  canMoveTo(offsetY: number, offsetX: number): boolean {
    return this.currentTetromino.shape.every(([dy, dx]) => {
      const y = this.position[0] + dy + offsetY;
      const x = this.position[1] + dx + offsetX;
  
      // –¥–æ–∑–≤–æ–ª—è—î–º–æ, —è–∫—â–æ —á–∞—Å—Ç–∏–Ω–∞ —Ñ—ñ–≥—É—Ä–∏ –≤–∏–ª–∞–∑–∏—Ç—å –Ω–∞–¥ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É
      if (y < 0) return true;
  
      return (
        y >= 0 &&
        y < this.rows &&
        x >= 0 &&
        x < this.cols &&
        this.grid[y][x] === '' // –≤–∞–∂–ª–∏–≤–æ! –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
      );
    });
  }
  

  moveDown(): void {
    this.clearTetromino(); // –≤–∞–∂–ª–∏–≤–æ!
  
    if (this.canMoveTo(1, 0)) {
      this.position[0]++;
      this.drawTetromino();
    } else {
      this.drawTetromino(); // –≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –º—ñ—Å—Ü–µ
      this.fixTetromino();
      this.spawnTetromino();
    }
  }
  
  

  startGameLoop(): void {
    this.intervalId = setInterval(() => {
      this.moveDown();
    }, 300);
  }

  @HostListener('window:keydown', ['$event'])
  handleKey(event: KeyboardEvent): void {
    let offsetY = 0;
    let offsetX = 0;
  
    if (event.key === 'ArrowLeft') offsetX = -1;
    else if (event.key === 'ArrowRight') offsetX = 1;
    else if (event.key === 'ArrowDown') offsetY = 1;
    else if (event.key === ' ') {
      this.rotateTetromino();
      return;
    } else return;
  
  
    this.clearTetromino();
  
    if (this.canMoveTo(offsetY, offsetX)) {
      this.position = [this.position[0] + offsetY, this.position[1] + offsetX];
    }
  
    this.drawTetromino();
  }
  
  rotateTetromino(): void {
    if (!this.currentTetromino.isRotatable) {
      return; // –Ø–∫—â–æ —Ñ—ñ–≥—É—Ä–∞ –Ω–µ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
    }
  
    this.clearTetromino(); // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ñ—ñ–≥—É—Ä—É –∑ —Å—ñ—Ç–∫–∏
  
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—É —Ñ–æ—Ä–º—É –¥–ª—è –≤—ñ–¥–∫–∞—Ç—É, —è–∫—â–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ
    const oldShape = [...this.currentTetromino.shape];
  
    // –û–±—á–∏—Å–ª—é—î–º–æ –Ω–æ–≤—É —Ñ–æ—Ä–º—É (–æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∑–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–≤–æ—é —Å—Ç—Ä—ñ–ª–∫–æ—é)
    const newShape: [number, number][] = this.currentTetromino.shape.map(([dy, dx]) => [-dx, dy]);
  
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
    const canRotate = newShape.every(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
  
      return (
        y >= 0 &&
        y < this.rows &&
        x >= 0 &&
        x < this.cols &&
        this.grid[y][x] === '' // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è
      );
    });
  
    if (canRotate) {
      this.currentTetromino.shape = newShape; // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ–æ—Ä–º—É
    } else {
      this.currentTetromino.shape = oldShape; // –í—ñ–¥–∫–∞—Ç –¥–æ —Å—Ç–∞—Ä–æ—ó —Ñ–æ—Ä–º–∏
    }
  
    this.drawTetromino(); // –ú–∞–ª—é—î–º–æ —Ñ—ñ–≥—É—Ä—É –∑ –Ω–æ–≤–æ—é (–∞–±–æ —Å—Ç–∞—Ä–æ—é) —Ñ–æ—Ä–º–æ—é
  }
  

  fixTetromino(): void {
    this.currentTetromino.shape.forEach(([dy, dx]) => {
      const y = this.position[0] + dy;
      const x = this.position[1] + dx;
      if (y >= 0 && y < this.rows && x >= 0 && x < this.cols) {
        this.grid[y][x] = this.currentTetromino.color;
      }
    });

    this.clearFullRows(); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –æ—á–∏—â–∞—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —Ä—è–¥–∫–∏
  }

  clearFullRows(): void {
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä—è–¥–∫–∏, —è–∫—ñ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
    const newGrid = this.grid.filter(row => row.some(cell => cell === ''));

    // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ –∑–≤–µ—Ä—Ö—É, —â–æ–± –∫–æ–º–ø–µ–Ω—Å—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ
    while (newGrid.length < this.rows) {
      newGrid.unshift(Array(this.cols).fill(''));
    }

    this.grid = newGrid; // –û–Ω–æ–≤–ª—é—î–º–æ —Å—ñ—Ç–∫—É
  }
  
}



